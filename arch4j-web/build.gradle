plugins {
    id 'java'
    id 'java-library'
    id 'io.freefair.lombok' version '8.10'
    id 'org.springframework.boot' version '3.4.1'
    id 'maven-publish'
    id 'com.google.cloud.tools.jib' version '3.4.0'
    id 'application'
}

dependencies {
    // subproject
    implementation platform(project(":arch4j-dependencies"))
    annotationProcessor platform(project(":arch4j-dependencies"))
    api project(":arch4j-core")

    // spring boot starter
    api 'org.springframework.boot:spring-boot-starter-web'
    api 'org.springframework.boot:spring-boot-starter-websocket'
    api 'org.springframework.boot:spring-boot-starter-security'
    api 'org.springframework.boot:spring-boot-starter-actuator'

    // springframework
    api 'org.springframework.session:spring-session-jdbc'

    // thymeleaf
    api 'org.springframework.boot:spring-boot-starter-thymeleaf'
    api 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    api 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // spring doc
    api 'org.springdoc:springdoc-openapi-starter-webmvc-api'

    // spring security test
    api 'org.springframework.security:spring-security-test'

    // prometheus
    api "io.micrometer:micrometer-registry-prometheus"

}

test {
    useJUnitPlatform()
    testLogging {
        events 'failed'
        exceptionFormat = 'full'
    }
}

jar {
    enabled = true
    archiveClassifier = ''
}

bootJar {
    enabled = true
    archiveClassifier = 'boot'
}

springBoot {
    buildInfo()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

jib {
    System.setProperty("sendCredentialsOverHttp", "true");
    allowInsecureRegistries = true
    from {
        image = project.jibFromImage
        auth {
            username = project.jibFromAuthUsername
            password = project.jibFromAuthPassword
        }
    }
    to {
        image = "${project.jibToImageNamespace}/${project.name}"
        auth {
            username = project.jibToAuthUsername
            password = project.jibToAuthPassword
        }
        tags = [project.jibToTags]
    }
    containerizingMode = "packaged"
    container {
        format = 'OCI'
        creationTime = "USE_CURRENT_TIMESTAMP"
        ports = ['8080']
        jvmFlags = ["-Dfile.encoding=UTF-8"]
    }
    extraDirectories {
        paths {
            path {
                from = file('src/dist/config')
                into = '/config'
            }
        }
    }
}

distTar {
    enabled = false
}

distZip {
    enabled = false
}

bootDistZip {
    into("${project.name}-boot-${project.version}") {
        from 'src/dist'
    }
}

bootDistTar {
    into("${project.name}-boot-${project.version}") {
        from 'src/dist'
    }
}
